# This guide assumes that docker is already installed
# however if docker is not installed one can use the
# install instructions found here (https://docs.docker.com/engine/install/ubuntu/)

sudo apt-get remove docker docker-engine docker.io containerd runc

# Update the apt package index and install packages to allow apt to use a repository over HTTPS:
sudo apt-get update

sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

# Add Docker’s official GPG key:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A 
# E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.

sudo apt-key fingerprint 0EBFCD88

# pub   rsa4096 2017-02-22 [SCEA]
#      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
# uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
# sub   rsa4096 2017-02-22 [S]

# Use the following command to set up the stable repository. To add the
# nightly or test repository, add the word nightly or test (or both) after
# the word stable in the commands below.

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

# Install the docker engine
# Update the apt package index, and install the latest version of Docker
# Engine and containerd, or go to the next step to install a specific version:

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io

# Verify that Docker Engine is installed correctly by running the hello-world image.

sudo docker run hello-world

# If you would like to use Docker as a non-root user, you should now consider
# adding your user to the “docker” group with something like:

sudo usermod -aG docker your-user

# Remember to log out and back in for this to take effect!


# setup a local registry.  This is the easiest way to enable the transformation
# into a singularity image mechanism.  You can read more about creating a private
# registry here (https://www.digitalocean.com/community/tutorials/how-to-set-up-a-private-docker-registry-on-ubuntu-18-04)
# These links describe what the regsitry is (https://docs.docker.com/registry/) and how to set
# it up in more complex ways than just localhost (https://docs.docker.com/registry/deploying/)

# The quick version is as follows (from https://hub.docker.com/_/registry):

docker run -d -p 5000:5000 --restart always --name registry registry:2

# Now, use it from within Docker (there are 3 basic steps to making a docker image available
# for a singularity transformation):

# 1) create the docker image using the `docker build` command
# 2) tag that image using the `docker tag` command
# 3) push that image to your local registry using the `docker push` command
# in this example, a pre-built docker image is pulled from dockerhub
# So instead of pulling an image, simply build the image you wish to transform
# locally

docker build -t <docker_image_name>:<version> -f <docker_definition_file>
docker tag ubuntu localhost:5000/ubuntu
docker push localhost:5000/ubuntu

# Now if you haven't already done so, install singularity
export DEBIAN_FRONTEND=noninteractive

# package dependencies
apt-get update -y
apt-get install -y --no-install-recommends \
      build-essential git openssh-server libncurses-dev libssl-dev libx11-dev \
      less bc file flex bison libexpat1-dev wish curl wget libcurl4-openssl-dev \
      libgtk2.0-common software-properties-common xserver-xorg dirmngr gnupg2 \
      lsb-release apt-utils uuid-dev libgpgme11-dev squashfs-tools

# install Go
# The minimum required version is determined by the version of Singularity
# See the latest singularity documentation for up-to-date information:
# https://sylabs.io/docs/#singularity
if [ -z "${HOME:-}" ]; then export HOME="$(cd ~ && pwd)"; fi
cd ${HOME}
export VERSION=1.15.2 OS=linux ARCH=amd64
wget -nv --no-check-certificate https://golang.org/dl/go$VERSION.$OS-$ARCH.tar.gz
tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz
rm -f go$VERSION.$OS-$ARCH.tar.gz
echo 'export GOPATH=${HOME}/go' >> ${HOME}/.bashrc
echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ${HOME}/.bashrc
export GOPATH=${HOME}/go
export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin

# build and install Singularity
PREFIX=/opt/singularity
mkdir -p ${PREFIX}
cd ${PREFIX}
export VERSION=3.6.3
wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-${VERSION}.tar.gz
tar -xzf singularity-${VERSION}.tar.gz
cd singularity
./mconfig
make -C builddir
make -C builddir install
rm ${PREFIX}/singularity-${VERSION}.tar.gz

# Now that singularity is installed, check valid installation by running 

singularity --version
# singularity version 3.6.1-1.el7

# transform a local docker image to a singularity image (first confirm
# that the image is available on your private registry)

curl localhost:5000/v2/_catalog
# {"repositories":["psl/intel-impi-jedi-stack-dev","psl/ubuntu18-intel-ufs-s2s-lite"]}


# Then, transform the docker image into a singularity image. Note, the SINGULARITY_NOHTTPS=1 is important
# so that singularity doesn't try to grab the tagged image from dockerhub.  You want singularity to grab
# the image from your locally hosted registry, not a remote registry.
SINGULARITY_NOHTTPS=1 singularity build <desired_image_name>.sif docker://localhost:5000/<docker_image_tag_name>


# The singularity image should now be ready for use.